searchNodes=[{"doc":"Reads a credo report in a json format ( mix credo --strict --format json &gt; credo.json ) and transforms it into a format that Jenkins can natively understand. As seen in: https://github.com/jenkinsci/warnings-ng-plugin/blob/master/plugin/src/test/resources/io/jenkins/plugins/analysis/warnings/steps/json-issues.log In theory it would be better if we called credo programatically, but for the time being this will do the trick.","ref":"CredoJenkins.html","title":"CredoJenkins","type":"module"},{"doc":"Reads and parses the Credo output from a given file on disk. Will raise if the file dows not exist or if it is not a proper JSON formatted Credo report. Examples iex&gt; CredoJenkins . read_credo_report! ( &quot;credo.json&quot; ) [ ] iex&gt; CredoJenkins . read_credo_report! ( &quot;credo.xml&quot; ) Jason.DecodeError","ref":"CredoJenkins.html#read_credo_report!/1","title":"CredoJenkins.read_credo_report!/1","type":"function"},{"doc":"Reads a credo json report from a given path, transforms it and outputs to a given path. Examples: iex&gt; CredoJenkins.run(&quot;credo.json&quot;, &quot;credo.log&quot;) :ok","ref":"CredoJenkins.html#run/2","title":"CredoJenkins.run/2","type":"function"},{"doc":"Takes an array of Credo issue maps and reduces them into a string that Jenkins can later read. Examples iex&gt; CredoJenkins . transform ( [ ] ) &quot;&quot; iex&gt; transform ( [ %{ ... } , %{ ... } ] ) &quot;{...} {...}&quot;","ref":"CredoJenkins.html#transform/1","title":"CredoJenkins.transform/1","type":"function"},{"doc":"Transforms a single Credo issue item into a format that Jenkins can natively read.","ref":"CredoJenkins.IssueTransformer.html","title":"CredoJenkins.IssueTransformer","type":"module"},{"doc":"Transforms a single Credo issue item into a format that Jenkins can natively read. We mark all as &quot;error&quot; severity as Credo does not offer severity levels.","ref":"CredoJenkins.IssueTransformer.html#transform/1","title":"CredoJenkins.IssueTransformer.transform/1","type":"function"}]